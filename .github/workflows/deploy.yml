name: Deploy Drupal Site

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled &
          sleep 5

      # 3. Connect to Tailnet
      - name: Connect to Tailnet
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          sudo tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=github-runner --timeout=30s
          tailscale status

      # 4. Verify Tailscale connectivity and setup SSH
      - name: Test Tailscale connectivity
        env:
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          echo "üîç Testing connectivity to homelab server..."
          echo "Target host: $SSH_HOST"
          
          # Test basic connectivity
          if ping -c 3 -W 5 $SSH_HOST; then
            echo "‚úÖ Ping successful to $SSH_HOST"
          else
            echo "‚ùå Ping failed to $SSH_HOST"
            echo "Available Tailscale peers:"
            tailscale status
            exit 1
          fi

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          echo "üîß Setting up SSH connection..."
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "üîç Scanning for host keys (timeout: 10s)..."
          if timeout 10 ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ Host key scan successful"
          else
            echo "‚ö†Ô∏è  Host key scan failed, adding host to known_hosts with StrictHostKeyChecking=no"
            echo "Host $SSH_HOST" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          fi
          
          echo "üß™ Testing SSH connection..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes $SSH_USER@$SSH_HOST 'echo "SSH connection successful"'; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo "SSH config:"
            cat ~/.ssh/config || echo "No SSH config found"
            exit 1
          fi
          
          echo "‚úÖ SSH key setup complete"

      # 5. Copy code to host
      - name: Copy Drupal code
        timeout-minutes: 5
        run: |
          echo "üöÄ Copying Drupal code to homelab..."
          rsync -az --timeout=300 --delete --exclude '.git' --exclude '.github' ./ ${{ secrets.HOMELAB_SSH_USER }}@${{ secrets.HOMELAB_TAILSCALE_IP }}:/home/${{ secrets.HOMELAB_SSH_USER }}/drupal_deploy_tmp

      # 6. Deploy Drupal via SSH action
      - name: Deploy Drupal
        uses: appleboy/ssh-action@v1.0.3
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        with:
          host: ${{ secrets.HOMELAB_TAILSCALE_IP }}
          username: ${{ secrets.HOMELAB_SSH_USER }}
          key: ${{ secrets.HOMELAB_SSH_KEY }}
          timeout: 15m
          envs: DB_NAME,DB_USER,DB_PASSWORD

          script: |
            set -e
            echo "üöÄ Starting Drupal deployment..."
            echo "DB_NAME: $DB_NAME"
            echo "DB_USER: $DB_USER"
            echo "DB_PASSWORD: [REDACTED]"
            
            echo '--- Testing docker access ---'
            if docker ps >/dev/null 2>&1; then
              echo '‚úÖ Docker access confirmed'
            else
              echo '‚ùå This script requires docker access for the SSH user'
              echo 'Please run this command on your server to add the user to docker group:'
              echo '  sudo usermod -aG docker $USER'
              echo 'Then logout and login again, or run: newgrp docker'
              exit 1
            fi
            
            echo '--- Moving code into live Drupal volume ---'
            # Use docker to copy files with proper permissions
            docker run --rm -v /home/$USER/drupal_deploy_tmp:/source -v /opt/drupal:/dest alpine sh -c '
              rm -rf /dest/* /dest/.[^.]* 2>/dev/null || true
              cp -a /source/. /dest/
            '
            rm -rf /home/$USER/drupal_deploy_tmp

            echo '--- Checking if container exists and is running ---'
            if docker ps -a --format 'table {{.Names}}' | grep -q '^homesite$'; then
              echo '‚úÖ Container homesite exists'
              if ! docker ps --format 'table {{.Names}}' | grep -q '^homesite$'; then
                echo '‚ö†Ô∏è  Container homesite not running, starting...'
                docker start homesite
                sleep 5
              else
                echo '‚úÖ Container homesite is already running'
              fi
            else
              echo '‚ùå Container homesite does not exist'
              echo 'Available containers:'
              docker ps -a
              exit 1
            fi

            echo '--- Ensuring container is connected to docker_net network ---'
            if docker network ls --format '{{.Name}}' | grep -q '^docker_net$'; then
              echo '‚úÖ docker_net network exists'
              if docker network inspect docker_net --format '{{range .Containers}}{{.Name}} {{end}}' | grep -q homesite; then
                echo '‚úÖ homesite is already connected to docker_net'
              else
                echo 'üîå Connecting homesite to docker_net network...'
                docker network connect docker_net homesite
                echo '‚úÖ homesite connected to docker_net network'
              fi
            else
              echo '‚ö†Ô∏è  docker_net network not found - database connectivity may not work'
              echo 'Available networks:'
              docker network ls
            fi

            echo '--- Running deployment steps inside container ---'
            docker exec -i -e IS_DOCKER_DEPLOYMENT=true -e DB_NAME="$DB_NAME" -e DB_USER="$DB_USER" -e DB_PASSWORD="$DB_PASSWORD" homesite timeout 600 bash << 'EOF'
              set -e
              echo "Debug: Environment variables set:"
              echo "  IS_DOCKER_DEPLOYMENT=$IS_DOCKER_DEPLOYMENT"
              echo "  DB_NAME=$DB_NAME"
              echo "  DB_USER=$DB_USER"
              echo "  DB_HOST will default to: drupal_db"
              
              echo "üîß Setting up persistent environment variables for Apache..."
              
              # Method 1: Add to Apache envvars file (most reliable for Drupal containers)
              echo "export IS_DOCKER_DEPLOYMENT=true" >> /etc/apache2/envvars
              echo "export DB_NAME=$DB_NAME" >> /etc/apache2/envvars
              echo "export DB_USER=$DB_USER" >> /etc/apache2/envvars
              echo "export DB_PASSWORD=$DB_PASSWORD" >> /etc/apache2/envvars
              echo "export DB_HOST=drupal_db" >> /etc/apache2/envvars
              echo "export DB_PORT=3306" >> /etc/apache2/envvars
              
              # Method 2: Add to PHP-FPM pool configuration if it exists
              if [ -f /etc/php/*/fpm/pool.d/www.conf ]; then
                for pool_file in /etc/php/*/fpm/pool.d/www.conf; do
                  echo "env[IS_DOCKER_DEPLOYMENT] = true" >> "$pool_file"
                  echo "env[DB_NAME] = $DB_NAME" >> "$pool_file"
                  echo "env[DB_USER] = $DB_USER" >> "$pool_file"
                  echo "env[DB_PASSWORD] = $DB_PASSWORD" >> "$pool_file"
                  echo "env[DB_HOST] = drupal_db" >> "$pool_file"
                  echo "env[DB_PORT] = 3306" >> "$pool_file"
                done
              fi
              
              # Method 3: Add to Apache virtual host environment (if mod_env is available)
              mkdir -p /etc/apache2/conf-available
              echo 'SetEnv IS_DOCKER_DEPLOYMENT "true"' > /etc/apache2/conf-available/drupal-env.conf
              echo "SetEnv DB_NAME \"$DB_NAME\"" >> /etc/apache2/conf-available/drupal-env.conf
              echo "SetEnv DB_USER \"$DB_USER\"" >> /etc/apache2/conf-available/drupal-env.conf
              echo "SetEnv DB_PASSWORD \"$DB_PASSWORD\"" >> /etc/apache2/conf-available/drupal-env.conf
              echo 'SetEnv DB_HOST "drupal_db"' >> /etc/apache2/conf-available/drupal-env.conf
              echo 'SetEnv DB_PORT "3306"' >> /etc/apache2/conf-available/drupal-env.conf
              # Enable the configuration
              a2enconf drupal-env || echo "a2enconf not available"
              
              # Method 4: Create .env file in Drupal root as backup
              echo "IS_DOCKER_DEPLOYMENT=true" > /opt/drupal/.env
              echo "DB_NAME=$DB_NAME" >> /opt/drupal/.env
              echo "DB_USER=$DB_USER" >> /opt/drupal/.env
              echo "DB_PASSWORD=$DB_PASSWORD" >> /opt/drupal/.env
              echo "DB_HOST=drupal_db" >> /opt/drupal/.env
              echo "DB_PORT=3306" >> /opt/drupal/.env
              
              # Method 5: Add to container's main environment (for next restart)
              echo "IS_DOCKER_DEPLOYMENT=true" >> /etc/environment
              echo "DB_NAME=$DB_NAME" >> /etc/environment
              echo "DB_USER=$DB_USER" >> /etc/environment
              echo "DB_PASSWORD=$DB_PASSWORD" >> /etc/environment
              echo "DB_HOST=drupal_db" >> /etc/environment
              echo "DB_PORT=3306" >> /etc/environment
              
              echo "‚úÖ Environment variables configured for persistence"
              
              cd /opt/drupal
              echo "üîß Installing system dependencies..."
              apt-get update -qq && apt-get install -y unzip apache2-utils
              echo "üßπ Clearing composer cache..."
              composer clear-cache
              echo "‚öôÔ∏è  Configuring composer plugins..."
              composer config --no-plugins allow-plugins.drupal/core-composer-scaffold true
              composer config --no-plugins allow-plugins.drush/drush true
              composer config --no-plugins allow-plugins.composer/installers true
              composer config --no-plugins allow-plugins.drupal/core-project-message true
              composer config --no-plugins allow-plugins.php-tuf/composer-integration true
              composer config --no-plugins allow-plugins.phpstan/extension-installer true
              composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
              composer config --no-plugins allow-plugins.php-http/discovery true
              echo "üì¶ Installing composer dependencies (with update to resolve lock conflicts)..."
              composer update --no-cache --no-interaction --prefer-dist
              echo "üîß Ensuring Drush is installed..."
              if ! composer show drush/drush >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Drush not found, installing explicitly..."
                composer require drush/drush --no-cache --no-interaction --prefer-dist
              else
                echo "‚úÖ Drush package is already installed"
              fi
              echo "üîÑ Verifying all packages installed..."
              composer show | grep -E "(drush|drupal)"
              echo "üîç Checking if Drush was installed..."
              ls -la vendor/bin/ | grep drush || echo "Drush not found in vendor/bin"
              echo "üîß Setting file permissions..."
              chown -R www-data:www-data /opt/drupal
              find /opt/drupal -type d -exec chmod 755 {} \;
              find /opt/drupal -type f -exec chmod 644 {} \;
              echo "üîß Preserving execute permissions for vendor binaries..."
              find /opt/drupal/vendor/bin -type f -exec chmod 755 {} \;
              echo "üîß Ensuring Drush executable has correct permissions..."
              find /opt/drupal/vendor -name "drush" -type f -exec chmod 755 {} \;
              echo "Final verification of Drush installation..."
              if [ -f "./vendor/bin/drush" ]; then
                echo "‚úÖ Drush binary found at ./vendor/bin/drush"
                ./vendor/bin/drush --version
              else
                echo "‚ùå Drush binary not found, checking composer show output..."
                composer show drush/drush || echo "Drush package not installed"
              fi
              echo "Checking database connectivity..."
              echo "Debug: Testing network connectivity to drupal_db..."
              ping -c 2 drupal_db || echo "Cannot ping drupal_db container"
              echo "Debug: Testing port 3306 on drupal_db..."
              timeout 5 bash -c "</dev/tcp/drupal_db/3306" && echo "Port 3306 accessible" || echo "Port 3306 not accessible"
              if [ -f "./vendor/bin/drush" ]; then
                echo "Debug: Testing database connection with drush status..."
                ./vendor/bin/drush status || echo "Drush status failed"
                if ./vendor/bin/drush status --format=json 2>/dev/null | grep -q "\"bootstrap\":\"Successful\""; then
                  echo "‚úÖ Database connection verified"
                  echo "üìä Importing configuration..."
                  ./vendor/bin/drush cim -y
                  echo "üóÑÔ∏è  Running database updates..."
                  ./vendor/bin/drush updb -y
                  echo "üßπ Clearing caches..."
                  ./vendor/bin/drush cr
                else
                  echo "‚ö†Ô∏è  Database not connected - container may need to be connected to docker_net network"
                  echo "To fix this, run on your server:"
                  echo "  docker network connect docker_net homesite"
                  echo "And ensure your settings.php database host points to the database container name"
                  echo "Skipping Drupal commands for now..."
                fi
              else
                echo "‚ùå Drush not found, skipping Drupal commands"
              fi
              echo "‚úÖ Drupal deployment steps completed successfully"
            EOF
            
            echo "--- Reloading Apache and PHP services ---"
            if docker ps --format 'table {{.Names}}' | grep -q '^homesite$'; then
              echo "üîÑ Reloading services inside container..."
              # Reload PHP-FPM if it exists
              docker exec homesite bash -c "service php*-fpm reload 2>/dev/null || true"
              # Reload Apache configuration
              docker exec homesite bash -c "service apache2 reload || systemctl reload apache2 || true"
              echo "üîÑ Restarting container for environment variables to take effect..."
              docker restart homesite
              echo "‚úÖ Container restarted successfully"
            else
              echo "‚ö†Ô∏è  Container homesite not running, attempting to start..."
              docker start homesite || echo "‚ùå Failed to start container"
            fi
            
            echo "--- Waiting for container to be ready ---"
            sleep 10
            for i in {1..30}; do
              if docker ps | grep -q homesite && docker exec homesite curl -f http://localhost >/dev/null 2>&1; then
                echo "‚úÖ Container is healthy and responding"
                break
              fi
              echo "‚è≥ Waiting for container to be ready... ($i/30)"
              sleep 2
            done
            
            echo "‚úÖ Deployment complete and container restarted."

      # 6. Clean up Tailscale session
      - name: Disconnect Tailscale
        if: always()
        run: |
          echo "üßπ Cleaning up Tailscale..."
          sudo tailscale logout || true
          sudo tailscale down || true
          echo "‚úÖ Tailscale session ended."
