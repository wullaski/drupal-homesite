name: Deploy Drupal Site

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled &
          sleep 5

      # 3. Connect to Tailnet
      - name: Connect to Tailnet
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          sudo tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=github-runner --timeout=30s
          tailscale status

      # 4. Debug SSH connection with retries
      - name: Debug SSH connection
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "Testing SSH connectivity..."
          for i in {1..10}; do
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "echo Connected" && break
            echo "SSH not ready yet, retrying ($i/10)..."
            sleep 5
          done

      # 5. Deploy Drupal site inside Docker container
      - name: Deploy Drupal via SSH
        if: success()
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "ðŸš€ Deploying Drupal code..."
          ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'EOF'
            set -e

            echo "--- Copying code into container ---"
            tar czf - ./ | docker exec -i homesite tar xzf - -C /var/www/html

            echo "--- Running deployment steps inside container ---"
            docker exec -i -u root homesite bash -eux << 'INCONTAINER'
              apt-get update -qq && apt-get install -y unzip apache2-utils

              cd /var/www/html

              composer clear-cache
              composer remove drupal/core-composer-scaffold || true
              composer require drupal/core-composer-scaffold --update-with-dependencies --no-interaction --no-progress
              composer install --no-interaction --prefer-dist --no-dev --no-progress

              # Fix ownership and permissions for Apache
              chown -R www-data:www-data /var/www/html
              find /var/www/html -type d -exec chmod 755 {} \;
              find /var/www/html -type f -exec chmod 644 {} \;
              chmod 644 /var/www/html/.htaccess || true

              # Run Drush maintenance tasks
              sudo -u www-data drush cim -y || true
              sudo -u www-data drush updb -y || true
              sudo -u www-data drush cr || true

              echo "--- Restarting Apache to apply changes ---"
              service apache2 restart || docker restart homesite || true

              echo "--- Checking permissions for debugging ---"
              ls -ld /var/www /var/www/html /var/www/html/.htaccess || true
              namei -l /var/www/html/.htaccess || true

              echo "âœ… Drupal deployment finished successfully."
            INCONTAINER
          EOF
