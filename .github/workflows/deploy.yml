name: Deploy Drupal Site

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled &
          sleep 5

      # 3. Connect to Tailnet
      - name: Connect to Tailnet
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          sudo tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=github-runner --timeout=30s
          tailscale status

      # 4. Verify Tailscale connectivity and setup SSH
      - name: Test Tailscale connectivity
        env:
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          echo "üîç Testing connectivity to homelab server..."
          echo "Target host: $SSH_HOST"
          
          # Test basic connectivity
          if ping -c 3 -W 5 $SSH_HOST; then
            echo "‚úÖ Ping successful to $SSH_HOST"
          else
            echo "‚ùå Ping failed to $SSH_HOST"
            echo "Available Tailscale peers:"
            tailscale status
            exit 1
          fi

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          echo "üîß Setting up SSH connection..."
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "üîç Scanning for host keys (timeout: 10s)..."
          if timeout 10 ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ Host key scan successful"
          else
            echo "‚ö†Ô∏è  Host key scan failed, adding host to known_hosts with StrictHostKeyChecking=no"
            echo "Host $SSH_HOST" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          fi
          
          echo "üß™ Testing SSH connection..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes $SSH_USER@$SSH_HOST 'echo "SSH connection successful"'; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo "SSH config:"
            cat ~/.ssh/config || echo "No SSH config found"
            exit 1
          fi
          
          echo "‚úÖ SSH key setup complete"

      # 5. Deploy Drupal via SSH + rsync
      - name: Deploy Drupal
        env:
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        timeout-minutes: 15
        run: |
          echo "üöÄ Deploying Drupal code..."

          # Install rsync if missing (using docker if needed)
          echo "üîß Checking for rsync on remote host..."
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 $SSH_USER@$SSH_HOST "
            if ! command -v rsync >/dev/null 2>&1; then
              echo '‚ö†Ô∏è  rsync not found, using docker to provide rsync functionality'
              echo 'Note: If you need system rsync, install it manually with: sudo apt-get install -y rsync'
            else
              echo '‚úÖ rsync is available'
            fi
          "

          # Copy updated code to host temp dir
          echo "--- Copying code to host ---"
          rsync -az --timeout=300 --delete --exclude '.git' --exclude '.github' ./ $SSH_USER@$SSH_HOST:/home/$SSH_USER/drupal_deploy_tmp

          # Move files into live directory and run deployment
          echo "--- Starting remote deployment ---"
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 $SSH_USER@$SSH_HOST "
            set -e
            echo '--- Testing docker access ---'
            if docker ps >/dev/null 2>&1; then
              echo '‚úÖ Docker access confirmed'
            else
              echo '‚ùå This script requires docker access for the SSH user'
              echo 'Please run this command on your server to add the user to docker group:'
              echo '  sudo usermod -aG docker $SSH_USER'
              echo 'Then logout and login again, or run: newgrp docker'
              exit 1
            fi
            
            echo '--- Moving code into live Drupal volume ---'
            # Use docker to copy files with proper permissions
            docker run --rm -v /home/$SSH_USER/drupal_deploy_tmp:/source -v /opt/drupal:/dest alpine sh -c '
              rm -rf /dest/* /dest/.[^.]* 2>/dev/null || true
              cp -a /source/. /dest/
            '
            rm -rf /home/$SSH_USER/drupal_deploy_tmp

            echo '--- Checking if container exists and is running ---'
            if docker ps -a --format 'table {{.Names}}' | grep -q '^homesite$'; then
              echo '‚úÖ Container homesite exists'
              if ! docker ps --format 'table {{.Names}}' | grep -q '^homesite$'; then
                echo '‚ö†Ô∏è  Container homesite not running, starting...'
                docker start homesite
                sleep 5
              else
                echo '‚úÖ Container homesite is already running'
              fi
            else
              echo '‚ùå Container homesite does not exist'
              echo 'Available containers:'
              docker ps -a
              exit 1
            fi

            echo '--- Running deployment steps inside container ---'
            docker exec -i homesite timeout 600 bash -c \"
              cd /opt/drupal && \\
              echo 'üîß Installing system dependencies...' && \\
              apt-get update -qq && apt-get install -y unzip apache2-utils && \\
              echo 'üßπ Clearing composer cache...' && \\
              composer clear-cache && \\
              echo '‚öôÔ∏è  Configuring composer plugins...' && \\
              composer config --no-plugins allow-plugins.drupal/core-composer-scaffold true && \\
              composer config --no-plugins allow-plugins.drush/drush true && \\
              composer config --no-plugins allow-plugins.composer/installers true && \\
              composer config --no-plugins allow-plugins.drupal/core-project-message true && \\
              composer config --no-plugins allow-plugins.php-tuf/composer-integration true && \\
              composer config --no-plugins allow-plugins.phpstan/extension-installer true && \\
              composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true && \\
              composer config --no-plugins allow-plugins.php-http/discovery true && \\
              echo 'üì¶ Installing composer dependencies (with update to resolve lock conflicts)...' && \\
              composer update --no-cache --no-interaction --prefer-dist && \\
              echo 'üîÑ Verifying all packages installed...' && \\
              composer show | grep -E '(drush|drupal)' && \\
              echo 'üîç Checking if Drush was installed...' && \\
              ls -la vendor/bin/ | grep drush || echo 'Drush not found in vendor/bin' && \\
              echo 'üîç Final verification of Drush installation...' && \\
              if [ -f './vendor/bin/drush' ]; then \\
                echo '‚úÖ Drush binary found at ./vendor/bin/drush' && \\
                ./vendor/bin/drush --version; \\
              else \\
                echo '‚ùå Drush binary not found, checking composer show output...' && \\
                composer show drush/drush || echo 'Drush package not installed'; \\
              fi && \\
              echo 'üîê Setting file permissions...' && \\
              chown -R www-data:www-data /opt/drupal && \\
              find /opt/drupal -type d -exec chmod 755 {} \\; && \\
              find /opt/drupal -type f -exec chmod 644 {} \\; && \\
              echo 'üìä Importing configuration...' && \\
              if [ -f './vendor/bin/drush' ]; then \\
                ./vendor/bin/drush cim -y && \\
                echo 'üóÑÔ∏è  Running database updates...' && \\
                ./vendor/bin/drush updb -y && \\
                echo 'üßπ Clearing caches...' && \\
                ./vendor/bin/drush cr; \\
              else \\
                echo '‚ùå Drush not found, skipping Drupal commands'; \\
              fi && \\
              echo '‚úÖ Drupal deployment steps completed successfully'
            \""

            echo '--- Restarting container for clean state ---'
            if docker ps --format 'table {{.Names}}' | grep -q '^homesite$'; then
              docker restart homesite
            else
              echo '‚ö†Ô∏è  Container homesite not running, skipping restart'
            fi
            
            echo '--- Waiting for container to be ready ---'
            sleep 10
            for i in {1..30}; do
              if docker ps | grep -q homesite && docker exec homesite curl -f http://localhost >/dev/null 2>&1; then
                echo '‚úÖ Container is healthy and responding'
                break
              fi
              echo '‚è≥ Waiting for container to be ready... (\$i/30)'
              sleep 2
            done
            
            echo '‚úÖ Deployment complete and container restarted.'
          "

      # 6. Clean up Tailscale session
      - name: Disconnect Tailscale
        if: always()
        run: |
          echo "üßπ Cleaning up Tailscale..."
          sudo tailscale logout || true
          sudo tailscale down || true
          echo "‚úÖ Tailscale session ended."
