name: Deploy Drupal Site

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
      - 'drupal/**'
      - 'composer.json'
      - 'composer.lock'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled &
          sleep 5

      # 3. Connect to Tailnet
      - name: Connect to Tailnet
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          sudo tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=github-runner --timeout=30s || true
          tailscale status || true

      # 4. Test SSH connection
      - name: Test SSH connection
        id: sshcheck
        continue-on-error: true
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "Testing SSH connectivity..."
          for i in {1..10}; do
            if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "echo Connected"; then
              echo "SSH_OK=true" >> $GITHUB_ENV
              exit 0
            fi
            echo "SSH not ready yet, retrying ($i/10)..."
            sleep 5
          done

          echo "SSH_OK=false" >> $GITHUB_ENV
          echo "⚠️ Could not connect to SSH host."
          exit 0

      # 5. 🚀 Deploy Drupal (only if SSH connection works)
      - name: 🚀 Deploy Drupal
        if: env.SSH_OK == 'true'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "--- Copying code to host ---"
          rsync -avz --delete --exclude='.git' --exclude='node_modules' ./ $SSH_USER@$SSH_HOST:/var/www/html/

          echo "--- Running deployment steps inside container ---"
          ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'INCONTAINER'
            set -e

            CONTAINER=$(docker ps --filter "name=homesite" --format "{{.ID}}" | head -n 1)
            echo "Found Drupal container: $CONTAINER"

            if [ -z "$CONTAINER" ]; then
              echo "❌ No running Drupal container found!"
              exit 1
            fi

            docker exec $CONTAINER bash -c "
              cd /opt/drupal
              echo 'Running composer install...'
              composer install --no-interaction --no-progress --optimize-autoloader

              echo 'Allowing Drupal composer plugins...'
              composer config --no-plugins allow-plugins.drupal/core-composer-scaffold true

              echo 'Running composer drupal:scaffold...'
              composer drupal:scaffold || true

              echo 'Clearing Drupal cache...'
              vendor/bin/drush cr || true

              echo '✅ Deployment inside container complete.'
            "
          INCONTAINER

      # 6. Skip message if offline
      - name: 💤 Homelab offline, skipping deploy
        if: env.SSH_OK != 'true'
        run: echo "Homelab unreachable, skipping deployment safely."
