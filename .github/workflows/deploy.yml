name: Deploy Drupal Site

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled &
          sleep 5

      # 3. Connect to Tailnet
      - name: Connect to Tailnet
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          sudo tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=github-runner --timeout=30s
          tailscale status

      # 4. Debug SSH connection with retries
      - name: Debug SSH connection
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "Testing SSH connectivity..."
          for i in {1..10}; do
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "echo Connected" && break
            echo "SSH not ready yet, retrying ($i/10)..."
            sleep 5
          done

      # 5. Deploy Drupal site
      - name: Deploy Drupal via SSH
        if: success()
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_KEY }}
          SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
          SSH_HOST: ${{ secrets.HOMELAB_TAILSCALE_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          echo "Deploying Drupal code..."
          ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'EOF'
            set -e

            # Install unzip as root (needed for Composer scaffold)
            docker exec -i -u root homesite bash -c "apt-get update && apt-get install -y unzip"

            # Stream code into the container
            tar czf - ./ | docker exec -i homesite tar xzf - -C /var/www/html

            # Clear Composer cache
            docker exec -i homesite composer clear-cache

            # Reinstall Drupal scaffold to fix missing files
            docker exec -i homesite composer remove drupal/core-composer-scaffold || true
            docker exec -i homesite composer require drupal/core-composer-scaffold --update-with-dependencies

            # Install other Composer dependencies
            docker exec -i homesite composer install --no-interaction --prefer-dist --no-dev

            # Fix ownership and permissions so Apache can read everything
            docker exec -i homesite chown -R www-data:www-data /var/www/html
            docker exec -i homesite find /var/www/html -type d -exec chmod 755 {} \;
            docker exec -i homesite find /var/www/html -type f -exec chmod 644 {} \;

            # Run Drush tasks as www-data
            docker exec -i -u www-data homesite drush cim -y
            docker exec -i -u www-data homesite drush updb -y
            docker exec -i -u www-data homesite drush cr

            echo "âœ… Deployment complete."
          EOF
